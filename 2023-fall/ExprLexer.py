# Generated from Expr.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,96,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,
        3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,
        9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,71,
        8,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,4,14,83,8,
        14,11,14,12,14,84,1,15,4,15,88,8,15,11,15,12,15,89,1,16,4,16,93,
        8,16,11,16,12,16,94,0,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,1,0,4,2,0,9,9,
        32,32,2,0,10,10,13,13,1,0,48,57,2,0,65,90,97,122,99,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,1,35,1,0,0,0,3,37,1,0,0,0,5,39,1,0,0,0,7,41,1,0,0,0,9,43,
        1,0,0,0,11,49,1,0,0,0,13,51,1,0,0,0,15,53,1,0,0,0,17,55,1,0,0,0,
        19,57,1,0,0,0,21,59,1,0,0,0,23,70,1,0,0,0,25,72,1,0,0,0,27,76,1,
        0,0,0,29,82,1,0,0,0,31,87,1,0,0,0,33,92,1,0,0,0,35,36,5,40,0,0,36,
        2,1,0,0,0,37,38,5,41,0,0,38,4,1,0,0,0,39,40,5,123,0,0,40,6,1,0,0,
        0,41,42,5,125,0,0,42,8,1,0,0,0,43,44,5,112,0,0,44,45,5,114,0,0,45,
        46,5,105,0,0,46,47,5,110,0,0,47,48,5,116,0,0,48,10,1,0,0,0,49,50,
        5,61,0,0,50,12,1,0,0,0,51,52,5,42,0,0,52,14,1,0,0,0,53,54,5,47,0,
        0,54,16,1,0,0,0,55,56,5,43,0,0,56,18,1,0,0,0,57,58,5,45,0,0,58,20,
        1,0,0,0,59,60,7,0,0,0,60,61,1,0,0,0,61,62,6,10,0,0,62,22,1,0,0,0,
        63,64,5,102,0,0,64,65,5,117,0,0,65,71,5,110,0,0,66,67,5,102,0,0,
        67,68,5,117,0,0,68,69,5,110,0,0,69,71,5,50,0,0,70,63,1,0,0,0,70,
        66,1,0,0,0,71,24,1,0,0,0,72,73,5,108,0,0,73,74,5,101,0,0,74,75,5,
        116,0,0,75,26,1,0,0,0,76,77,5,109,0,0,77,78,5,97,0,0,78,79,5,105,
        0,0,79,80,5,110,0,0,80,28,1,0,0,0,81,83,7,1,0,0,82,81,1,0,0,0,83,
        84,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,30,1,0,0,0,86,88,7,2,0,
        0,87,86,1,0,0,0,88,89,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,32,
        1,0,0,0,91,93,7,3,0,0,92,91,1,0,0,0,93,94,1,0,0,0,94,92,1,0,0,0,
        94,95,1,0,0,0,95,34,1,0,0,0,5,0,70,84,89,94,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    SPACES = 11
    FUN = 12
    LET = 13
    MAIN = 14
    NEWLINE = 15
    INT = 16
    IDENT = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "'print'", "'='", "'*'", "'/'", 
            "'+'", "'-'", "'let'", "'main'" ]

    symbolicNames = [ "<INVALID>",
            "SPACES", "FUN", "LET", "MAIN", "NEWLINE", "INT", "IDENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "SPACES", "FUN", "LET", "MAIN", 
                  "NEWLINE", "INT", "IDENT" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


